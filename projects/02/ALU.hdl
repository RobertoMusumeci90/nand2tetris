// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit);.
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1); set x = 0        // 16-bit constant
// if (nx == 1); set x = !x       // bitwise not
// if (zy == 1); set y = 0        // 16-bit constant
// if (ny == 1); set y = !y       // bitwise not
// if (f == 1);  set out = x + y  // integer 2's complement addition
// if (f == 0);  set out = x & y  // bitwise and
// if (no == 1); set out = !out   // bitwise not
// if (out == 0); set zr = 1
// if (out < 0); set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1); or x & y (if 0);
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0);, 0 otherwise
        ng; // 1 if (out < 0);,  0 otherwise

    PARTS:
   // Put you code here:


    Not16(in=x, out=NX);
    And16(a=x, b=false, out=ZX);
    Not16(in=ZX, out=notZX);
    Mux4Way16(a=x, b=NX, c=ZX, d=notZX, sel[0]=nx, sel[1]=zx, out=X);



    Not16(in=y, out=NY);
    And16(a=y, b=false, out=ZY);
    Not16(in=ZY, out=notZY);
    Mux4Way16(a=y, b=NY, c=ZY, d=notZY, sel[0]=ny, sel[1]=zy, out=Y);




    And16(a=X, b=Y, out=Fand);
    Not16(in = Fand, out=NFand);
    Add16(a=X, b=Y, out=Fadd);
    Not16(in = Fadd, out=NFadd);
    Mux4Way16(a=Fand, b=NFand, c=Fadd, d=NFadd, sel[0]=no, sel[1]=f, out[0..7]=LO, out[8..14]=HI, out[15]=MSD);




    And16(a[0..7]=LO, a[8..14]=HI,a[15]=MSD, b=true, out=out);
    Xor(a=MSD, b=false, out=ng);

    Or8Way(in=LO, out=LOor);
    Or8Way(in[0..6]=HI,in[7]=MSD, out=HIor);
    Or(a=LOor, b=HIor, out=selectOR);
    Xor(a=selectOR, b=true, out=zr);






}
